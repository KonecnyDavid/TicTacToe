{"version":3,"sources":["../node_modules/peerjs/dist sync","Component/Game/win_check.js","rec.png","plus.png","Component/Field/index.js","Component/Board/index.js","Component/GameInfo/index.js","Component/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","checkWin","board","x","y","isCircle","boardSize","length","borders","leftMin","Math","max","rightMin","min","topMin","bottomMin","res","forEach","directionPair","direct","oldX","oldY","i","found_next","chechDirection","Field","onClick","symbol","src","Circle","style","width","height","marginBottom","Cross","padding","border","Board","clickHandler","borderCollapse","float","map","items","item","GameInfo","gameState","isConnected","move","started","className","conn","winner","class","peer","Peer","Game","size","gameId","useState","setGameState","initialState","row","push","initializeState","setBoard","myPeerId","setMyPeerId","opponentPeerId","setOpponentPeerId","connection","setConnection","data","setData","send","useEffect","URLSearchParams","window","location","search","get","type","on","console","log","starting","connect","newBoard","indexOut","col","indexIn","App","player","Boolean","hostname","match","onload","container","document","getElementById","ReactDOM","render","dataset","gameid","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a009bd.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 12;","const requiredToWin = 5;\r\n\r\nconst chechDirection = (x, y, board, directionPair, isCircle, borders) => {\r\n  let direct = 1;\r\n\r\n  const oldX = x;\r\n  const oldY = y;\r\n\r\n  for (let i = 0; i <= 1; i++) {\r\n    let found_next = false;\r\n    x = oldX;\r\n    y = oldY;\r\n\r\n    y += directionPair[i][0];\r\n    x += directionPair[i][1];\r\n\r\n    while (\r\n      !found_next &&\r\n      y >= borders.topMin &&\r\n      x >= borders.leftMin &&\r\n      y < borders.bottomMin &&\r\n      x < borders.rightMin\r\n    ) {\r\n      let current = board[y][x];\r\n\r\n      if (current === isCircle) {\r\n        direct += 1;\r\n      } else {\r\n        found_next = true;\r\n      }\r\n\r\n      y += directionPair[i][0];\r\n      x += directionPair[i][1];\r\n    }\r\n  }\r\n\r\n  if (direct >= requiredToWin) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst checkWin = (board, x, y, isCircle) => {\r\n  const boardSize = board.length;\r\n  const borders = {\r\n    leftMin: Math.max(0, x - requiredToWin),\r\n    rightMin: Math.min(boardSize, x + requiredToWin),\r\n    topMin: Math.max(0, y - requiredToWin),\r\n    bottomMin: Math.min(boardSize, y + requiredToWin)\r\n  };\r\n\r\n  const directions = [\r\n    [\r\n      [1, 1],\r\n      [-1, -1]\r\n    ],\r\n    [\r\n      [-1, 1],\r\n      [1, -1]\r\n    ],\r\n    [\r\n      [0, -1],\r\n      [0, 1]\r\n    ],\r\n    [\r\n      [-1, 0],\r\n      [1, 0]\r\n    ]\r\n  ];\r\n\r\n  let res = false;\r\n\r\n  directions.forEach(directionPair => {\r\n    let is_win = chechDirection(x, y, board, directionPair, isCircle, borders);\r\n\r\n    if (is_win) {\r\n      res = true;\r\n    }\r\n  });\r\n\r\n  return res;\r\n\r\n};\r\nexport default checkWin;\r\n","export default __webpack_public_path__ + \"static/media/rec.31c6fa52.png\";","export default __webpack_public_path__ + \"static/media/plus.35630838.png\";","import React from \"react\";\r\nimport Circle from \"../../rec.png\"\r\nimport Cross from \"../../plus.png\"\r\n\r\nconst Field = ({ isCircle, onClick }) => {\r\n  const symbol =\r\n    isCircle === null ? (\r\n      \"\"\r\n    ) : isCircle === true ? (\r\n      <img src={Circle} style={{width: 40, height: 40, marginBottom: \"-5px\"}}/>\r\n    ) : (\r\n      <img src={Cross} style={{width: 40, height: 40, marginBottom: \"-5px\"}}/>\r\n    );\r\n  return (\r\n    <td\r\n      onClick={onClick}\r\n      style={{\r\n        width: 50,\r\n        height: 50,\r\n        padding: 5,\r\n        border: \"1px solid black\",\r\n      }}\r\n    \r\n    >\r\n      {symbol}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import React from 'react';\r\nimport Field from \"./../Field\";\r\n\r\nconst Board = ({clickHandler, board}) => (\r\n<table style={{ borderCollapse: \"collapse\", float: \"right\" }}>\r\n        <tbody>\r\n          {board.map((items, y) => (\r\n            <tr key={y}>\r\n              {items.map((item, x) => (\r\n                <Field\r\n                  key={`${y}${x}`}\r\n                  isCircle={item}\r\n                  onClick={() => clickHandler(x, y)}\r\n                />\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n)\r\n\r\nexport default Board;","import React from \"react\";\r\n\r\nconst GameInfo = ({ gameState, isConnected }) => {\r\n  const move = gameState.move ? \"You\" : \"Opponent\";\r\n  const started = gameState.started ? <span className=\"tag is-success\">Started</span> : <span className=\"tag is-danger\">Not Started</span>;\r\n  const isCircle = gameState.isCircle ? \"0\" : \"X\";\r\n  const conn = isConnected ? <span className=\"tag is-success\">Connected</span> : <span className=\"tag is-danger\">Not connected</span>;\r\n  const winner = gameState.winner === null? \"No winner\" : gameState === \"X\"? \"X is a winner\":\"O is a winner\";\r\n\r\n  return (\r\n    <aside className=\"menu\">\r\n      <p className=\"menu-label\">Game Info</p>\r\n      <ul className=\"menu-list\">\r\n        <li>\r\n          <a>{conn}</a>\r\n        </li>\r\n        <li>\r\n          <a>{started}</a>\r\n        </li>\r\n        <li>\r\n          <a>Move: <span class=\"tag is-link\">{move}</span></a>\r\n        </li>\r\n        <li>\r\n          <a>Symbol: {isCircle}</a>\r\n        </li>\r\n        <li>\r\n          <a>{winner}</a>\r\n        </li>\r\n      </ul>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport checkWin from \"./win_check\";\r\nimport Board from \"../Board\";\r\nimport GameInfo from \"../GameInfo\";\r\nimport Peer from \"peerjs\";\r\n\r\nconst initializeState = (size) => {\r\n  let initialState = [];\r\n  for (let y = 0; y < size; y++) {\r\n    const row = [];\r\n    for (let x = 0; x < size; x++) {\r\n      row.push(null);\r\n    }\r\n    initialState.push(row);\r\n  }\r\n  return initialState;\r\n};\r\n\r\nconst peer = new Peer();\r\n\r\nconst Game = ({ size, gameId }) => {\r\n  const [gameState, setGameState] = useState({\r\n    started: false,\r\n    isCircle: null,\r\n    move: null,\r\n    winner: null,\r\n  });\r\n\r\n  const [board, setBoard] = useState(initializeState(size));\r\n  const [myPeerId, setMyPeerId] = useState(\"\");\r\n  const [opponentPeerId, setOpponentPeerId] = useState(\"\");\r\n  const [connection, setConnection] = useState(null)\r\n  const [data, setData] = useState(null)\r\n\r\n  const clickHandler = (x, y) => {\r\n    if (gameState.started && gameState.move && board[y][x] === null) {\r\n      const newBoard = board.map((row, indexOut) =>\r\n        row.map((col, indexIn) =>\r\n          x === indexIn && y === indexOut ? gameState.isCircle : col\r\n        )\r\n      );\r\n      setBoard(newBoard);\r\n      send({ type: \"turn\", data: newBoard });\r\n\r\n      const is_win = checkWin(newBoard, x, y, gameState.isCircle);\r\n\r\n      if (is_win) {\r\n        setGameState({\r\n          ...gameState,\r\n          move: false,\r\n          winner: gameState.isCircle ? \"O\" : \"X\",\r\n          started: false,\r\n        });\r\n        send({ type: \"win\", data: gameState.isCircle });\r\n      } else {\r\n        setGameState({ ...gameState, move: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  const send = (data) => {\r\n      if(connection) {\r\n          connection.send(data);\r\n      }\r\n  }\r\n\r\n  useEffect(() => {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const gameId = urlParams.get('gameId');\r\n        if (gameId) {\r\n            setOpponentPeerId(gameId);\r\n        }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // Determine player move\r\n    if (data) {\r\n      switch (data.type) {\r\n        case \"connection\":\r\n          break;\r\n        case \"turn\":\r\n          setBoard(data.data);\r\n          setGameState({ ...gameState, move: true });\r\n          break;\r\n        case \"win\":\r\n          setGameState({\r\n            ...gameState,\r\n            move: false,\r\n            started: false,\r\n            winner: data.data ? \"O\" : \"X\",\r\n          });\r\n        default:\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    peer.on('open', function(id) {\r\n        setMyPeerId(id)\r\n        peer.on('connection', function(conn) { \r\n            setConnection(conn)\r\n            setOpponentPeerId(conn.id)\r\n\r\n            conn.on('data', function(data){\r\n                console.log(data)\r\n                setData(data)\r\n            })\r\n        });\r\n    });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (connection) {\r\n        const starting = opponentPeerId > myPeerId;\r\n        setGameState({\r\n          ...gameState,\r\n          started: true,\r\n          isCircle: starting,\r\n          move: starting,\r\n        });\r\n    }\r\n  }, [connection])\r\n\r\n  useEffect(() => {\r\n    if (!connection && opponentPeerId !== \"\" && myPeerId !== \"\") {\r\n        let conn = peer.connect(opponentPeerId);\r\n        conn.on('open', function() {\r\n            setConnection(conn)\r\n            conn.on('data', function(data){\r\n                console.log(data)\r\n                setData(data)\r\n            })\r\n        });\r\n    }\r\n  }, [opponentPeerId, myPeerId])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"columns\">\r\n        <div className=\"column\">\r\n          <Board clickHandler={clickHandler} board={board} />\r\n        </div>\r\n        <div className=\"column\">\r\n          <GameInfo gameState={gameState} isConnected={!!connection} />\r\n        </div>\r\n      </div>\r\n      <nav className=\"level\">\r\n        <div className=\"level-item has-text-centered\">\r\n          <div>\r\n            <p className=\"heading\">Game Id</p>\r\n            <p className=\"title\">{myPeerId}</p>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Component/Game';\r\n\r\nfunction App({gameId}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game size={12} player=\"circle\" gameId={gameId}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nwindow.onload = () => {\r\n    const container = document.getElementById('root')\r\n    ReactDOM.render(<App gameId={container.dataset.gameid}/>, container);\r\n}\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}